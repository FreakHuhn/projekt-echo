üìã N√§chste sinnvolle Schritte f√ºr Project Echo
===============================================

Diese Punkte bauen auf dem bisherigen Fortschritt auf (Logging, Modularisierung, Echo-Verhalten, Profil etc.)

--------------------------------------------------------
1Ô∏è‚É£ Mini-Router: Kommandos als Mapping auslagern
--------------------------------------------------------

Ziel:
- `handle_command()` in logic.py durch `COMMANDS = {...}` ersetzen
- Vorteil: modular, lesbar, einfach erweiterbar

Beispiel:

COMMANDS = {
    "!status": handle_status_command,
    "!reset": handle_reset_command,
    "!profil": handle_profil_command,
    ...
}

Dann:

cmd = command.split()[0]
if cmd in COMMANDS:
    return COMMANDS[cmd](user_memory, username), False

--------------------------------------------------------
2Ô∏è‚É£ Export: Nutzerstatus als JSON f√ºr GUI/Web
--------------------------------------------------------

Ziel:
- `build_user_snapshot(user_memory)` in z.‚ÄØB. `features/export.py`
- Liefert: name, mood, modus, letzter_befehl, quiz_status usw.
- Vorteil: f√ºr Weboverlay, Streaming, Live-Bots nutzbar

Beispiel:
{
    "name": "FreakHuhn",
    "mood": "neutral",
    "modus": "gpt",
    "letzter_befehl": "!echo hallo"
}

--------------------------------------------------------
3Ô∏è‚É£ GPT-Parametrisierung vorbereiten
--------------------------------------------------------

Ziel:
- GPT-Funktionen flexibler machen (z.‚ÄØB. Temperatur, Top-P)
- Erweiterbar f√ºr `!set gpt temp=1.2`

Beispiel:
get_gpt_response(..., temperature=1.1)
‚Üí in future auch: user_memory["gpt_settings"]["temperature"]

--------------------------------------------------------
‚úÖ Optionale Extras
--------------------------------------------------------

- `test_logic.py` verbessern (mehr Coverage)
- `!history` h√ºbscher machen (mit GPT-Format)
- `echo.log` per Logrotation sch√ºtzen
- `get_gpt_response()` vereinheitlichen

