Machine Learning Roadmap für Project Echo
Ziel: Erweiterung von Echo um die Fähigkeit, toxische Sprache zu erkennen und entsprechend zu reagieren.

Diese Roadmap beschreibt die nötigen Schritte zur Integration eines einfachen maschinellen Lernmodells, das Discord-Nachrichten klassifizieren kann (toxisch vs. neutral) und damit automatisierte Moderation ermöglicht – mit optionalem Humor, Strikes und Lernfeedback.
_______________________________________________________________________________________________
Phase 1 – Toxizitätserkennung vorbereiten
Ziel:
Echo soll eingehende Nachrichten auf toxische Inhalte prüfen können. In dieser Phase erfolgt nur die passive Analyse, ohne automatische Reaktion.

Aufgaben:

Modul features/ml/check_toxicity.py erstellen

Laden von model.joblib und vectorizer.joblib beim Bot-Start

Integration in echo_bot.py → on_message():

from features.ml.check_toxicity import is_toxic
if is_toxic(message.content):
    # Logging, Markierung, Reaktion etc.
_______________________________________________________________________________________________
Phase 2 – Datensammlung und Labeling
Ziel:
Erstellung eines Trainingsdatensatzes zur Unterscheidung zwischen toxischen und neutralen Nachrichten.

Format: data/train_data.csv

Beispiel:

text,label
"Du bist echt das Letzte.",1
"Ich wünsche dir einen schönen Tag.",0
Aufgaben:

Sammlung von Beispielen (manuell oder GPT-generiert)

Labelvergabe (1 = toxisch, 0 = neutral)

Optionales Helfer-Tool: tools/generate_dataset.py
_______________________________________________________________________________________________
Phase 3 – Modelltraining
Ziel:
Trainieren eines Textklassifikators mit TF-IDF-Vektorisierung.

Tools:

pandas

scikit-learn (LogisticRegression)

TfidfVectorizer

joblib

Modul: features/ml/train_model.py

Erzeugt:

model.joblib

vectorizer.joblib

Optional: Ausgabe von Accuracy, Confusion Matrix, Schlüsselbegriffen
_______________________________________________________________________________________________
Phase 4 – Klassifikation und Reaktion
Ziel:
Echo bewertet Nachrichten zur Laufzeit und kann bei toxischen Inhalten automatisch oder stilisiert reagieren.

Integration:

Prüfung jeder Nachricht im on_message()-Handler

Reaktion z. B.:

Hinweis- oder Warnnachricht

Stilisierte Reaktion über GPT

!judge-ähnliche Mechanik

Optional:
Reaktion abhängig vom Modus oder der aktuellen Stimmung des Nutzers.
_______________________________________________________________________________________________
Phase 5 – Strike-System
Ziel:
Toxisches Verhalten wird über Zeit gespeichert und abgestuft sanktioniert.

Modul: features/strike.py
Speicherung z. B. in strikes.json oder SQLite

Funktionalität:

add_strike(user_id)

get_strike_count(user_id)

reset_strikes(user_id)

Beispielhafte Eskalation:

Verwarnung

Timeout / Mute

Kick oder Bann
_______________________________________________________________________________________________
Phase 6 – Feedback & Lernen
Ziel:
Echo kann durch Feedback verbessert und nachtrainiert werden.

Ideen:

!toxfeedback-Befehl für manuelles Korrektur-Feedback

Fehlklassifikationen speichern in data/misclassified.csv

Optionales Tool tools/retrain.py für erweitertes Modelltraining
_______________________________________________________________________________________________
Projektstruktur

features/
├── invite.py
├── memory_io.py
├── profil.py
├── quiz.py
├── ml/
│   ├── check_toxicity.py     # Laufzeitprüfung
│   ├── train_model.py        # Modelltraining
│   ├── model.joblib          # Klassifikator
│   └── vectorizer.joblib     # Vektorisierer
├── strike.py                 # Strike-Logik
data/
├── train_data.csv            # Trainingsdaten
├── misclassified.csv         # Fehlklassifikationen (optional)
tools/
└── generate_dataset.py       # Tool zum Datensammeln (optional)
_______________________________________________________________________________________________
Weitere relevante Dateien im Projekt:

echo_bot.py                   # Discord-Eventhandling
logic.py                      # Befehlverarbeitung
gpt.py                        # GPT-Kommunikation
main.py                       # CLI-Modus
test_logic.py                 # Unit-Tests
memory.json                   # Benutzerspeicher
README.md                     # Projektübersicht
